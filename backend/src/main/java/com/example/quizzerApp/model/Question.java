package com.example.quizzerApp.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Entity representing a question in a quiz.
 * Contains the question content, difficulty level, and answer options.
 * Has a many-to-one relationship with Quiz and a one-to-many relationship with
 * AnswerOption.
 */
@Entity
public class Question {

    /**
     * Unique identifier for the question.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The text content of the question.
     */
    private String content;

    /**
     * The difficulty level of the question (e.g., "Easy", "Medium", "Hard").
     */
    private String difficulty;

    /**
     * The quiz that this question belongs to.
     * Many-to-one relationship with Quiz entity.
     * JsonIgnoreProperties prevents infinite recursion during serialization.
     */
    @ManyToOne
    @JoinColumn(name = "quiz_id")
    @JsonIgnoreProperties("questions") // Prevents circular references
    private Quiz quiz;

    /**
     * The list of answer options for this question.
     * One-to-many relationship with AnswerOption entity.
     * Cascade type ALL ensures that operations on the question cascade to its
     * answers.
     * OrphanRemoval ensures that answer options are deleted when removed from this
     * list.
     */
    @OneToMany(mappedBy = "question", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnoreProperties("question") // Prevents circular references
    private List<AnswerOption> answers = new ArrayList<>();

    /**
     * Retrieves the ID of the question.
     *
     * @return The question ID
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the ID of the question.
     *
     * @param id The question ID to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Retrieves the content of the question.
     *
     * @return The question content
     */
    public String getContent() {
        return content;
    }

    /**
     * Sets the content of the question.
     *
     * @param content The question content to set
     */
    public void setContent(String content) {
        this.content = content;
    }

    /**
     * Retrieves the difficulty level of the question.
     *
     * @return The difficulty level
     */
    public String getDifficulty() {
        return difficulty;
    }

    /**
     * Sets the difficulty level of the question.
     *
     * @param difficulty The difficulty level to set
     */
    public void setDifficulty(String difficulty) {
        this.difficulty = difficulty;
    }

    /**
     * Retrieves the quiz that this question belongs to.
     *
     * @return The parent quiz
     */
    public Quiz getQuiz() {
        return quiz;
    }

    /**
     * Sets the quiz that this question belongs to.
     * Establishes the many-to-one relationship.
     *
     * @param quiz The parent quiz to set
     */
    public void setQuiz(Quiz quiz) {
        this.quiz = quiz;
    }

    /**
     * Retrieves the list of answer options for this question.
     *
     * @return The list of answer options
     */
    public List<AnswerOption> getAnswers() {
        return answers;
    }

    /**
     * Sets the list of answer options for this question.
     *
     * @param answers The list of answer options to set
     */
    public void setAnswers(List<AnswerOption> answers) {
        this.answers = answers;
    }

    /**
     * Helper method to add an answer option to this question.
     * Establishes the bidirectional relationship by setting this question
     * as the parent of the answer option.
     *
     * @param option The answer option to add
     */
    public void addAnswerOption(AnswerOption option) {
        option.setQuestion(this);
        this.answers.add(option);
    }
}